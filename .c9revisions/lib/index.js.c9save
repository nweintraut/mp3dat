{"ts":1369423808781,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1369423909191,"patch":[[{"diffs":[[1,"var fs = require('fs');\n// half-byte(4bit) hex values to interpreted bitrates(bps)\n//only MPEG-1 bitrates supported\nvar bitrates = {\n    1: 32000, 2: 40000, 3: 48000, 4: 56000, 5: 64000,\n    6: 80000, 7: 96000, 8: 112000, 9: 128000, A: 160000, B: 192000,\n    C: 224000, D: 256000, E: 320000 };\n    "]],"start1":0,"start2":0,"length1":0,"length2":298}]],"length":298,"saved":false}
{"ts":1369424005348,"patch":[[{"diffs":[[0,"0000 };\n"],[-1,"    "],[1,"function buildStats(bitrate, size, cb) {\n    var magnitudes = ['hours', 'minutes', 'seconds', 'milliseconds'],\n        duration = {},\n        stats,\n        hours = (size / (bitrate / 8) / 3600);\n    (function timeProcessor(time, counter){\n        \n    })(hours, 0);\n}"]],"start1":286,"start2":286,"length1":12,"length2":276}]],"length":562,"saved":false}
{"ts":1369424180340,"patch":[[{"diffs":[[0,"unter){\n"],[1,"        var timeArray = [],\n            factor = (counter < 3) ? 60 : 1000;\n        if (counter) {\n            timeArray = (factor * + ('0.' + time)).toString().split('.');\n        }\n        if (counter < magnitudes.length -1 ) {\n            duration[magnitudes[counter]] = timeArray[0] || Math.floor(time);\n            duration[magnitudes[counter]] = + duration[magnitudes[counter]];\n            counter += 1;\n            timeProcessor(timeArray[1] || time.toString().split('.')[1], counter);\n            return;\n        }\n"],[0,"        "]],"start1":526,"start2":526,"length1":16,"length2":540}]],"length":1086,"saved":false}
{"ts":1369424337119,"patch":[[{"diffs":[[0,"    "],[-1,"\n    })(hours, 0"],[1,"// round off the final magnitude\n        duration[magnitudes[counter]] = Math.round(timeArray.join('.'));\n    })(hours, 0);\n    stats = {\n        duration: duration,\n        bitrate: bitrate,\n        filesize: size,\n        timestamp: Math.round(hours *3600000),\n        timesig: ''\n    };\n    funciton pad(n){return n < 10 ? '0'+n : n}\n    magnitudes.forEach(function(mag, i){\n        if (i<3) {\n            stats.timesig += pad(duration[mag]) + ((i<2) ? ':' : '');\n        }\n    });\n    cb(null, stats"],[0,");\n}"]],"start1":1062,"start2":1062,"length1":24,"length2":511}]],"length":1573,"saved":false}
{"ts":1369424606163,"patch":[[{"diffs":[[0,"    func"],[-1,"i"],[0,"t"],[1,"i"],[0,"on pad(n"]],"start1":1356,"start2":1356,"length1":18,"length2":18},{"diffs":[[0,"stats);\n"],[-1,""],[0,"}"],[1,"\nfunction findBitRate(f, cb) {\n    fs.createReadStream(f)\n        .on('data', function(data){\n            var i;\n            for (i=0; i < data.length; i += 2) {\n                if(data.readUInt16LE(i) === 64511) {\n                    this.destroy();\n                    cb(null, bitrates[data.toString('hex', i+2, i+ 3)[0]]);\n                    break;\n                }\n            }   \n        })\n        .on('end', function(){\n            cb(new Error('could not find bitrate, is this definitely an MPEG-1 MP3?'));\n        });\n}\nexports.stat = function(f, cb){\n    fs.stat(f, function(err, fstats){\n       findBitRate(f, function(err, bitrate) {\n           if(err) {cb(err); return;}\n           buildStats(bitrate, fstats.size, cb);\n       });\n    });\n};"]],"start1":1564,"start2":1564,"length1":9,"length2":767}]],"length":2331,"saved":false}
