{"ts":1369422336566,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1369422484243,"patch":[[{"diffs":[[1,"var assert = require('assert');\nvar mp3dat = require('../index.js');\nvar testFile = 'text/test.mp3';\n\n\nassert(mp3dat, 'mp3dat failed to load');\nassert(mp3dat.stat, 'there should be a stat mentod');\nassert(mp3dat.stat instanceof Function, 'stat should be a Function');\n"]],"start1":0,"start2":0,"length1":0,"length2":268}]],"length":268,"saved":false}
{"ts":1369422908220,"patch":[[{"diffs":[[0,"Function');\n"],[1,"\nmp3dat.stat(testFile, function(err, stats){\n    assert.ifError(err);\n    // expected properties\n    \n    assert(stats.duration, 'should be a truthy duration property');\n    assert(stats.bitrate, 'should be a truthy bitrate property');\n    assert(stats.fizlesize, 'should be a truthy filesize property');\n    assert(stats.timestamp, 'should be a truthy timestamp property');\n    assert(stats.timesig, 'should be a truthy timesig property');\n    \n    //expected types\n    assert.equal(typeof stats.duration, 'object', 'duration should be an object type');\n    assert(stats.duration instanceof Object, 'duration should be an instance of Object');\n    assert(!isNaN(stats.bitrate), 'bitrate should be a number');\n    assert(!isNaN(stats.filesize), 'filesize should be a number');\n    assert(!isNaN(stats.timestamp), ' timestamp should be a number');\n    assert(stats.timesig.match(/^\\d+:\\d+:\\d+$/), 'timesig should be in HH:MM:SS format');\n    // expected duration properties\n    assert.notStrictEqual(stats.duration.hours,   undefined, 'should be a duration.hours property');\n    assert.notStrictEqual(stats.duration.minutes, undefined, 'should be a duration.minutes property');\n    \n});"]],"start1":256,"start2":256,"length1":12,"length2":1197}]],"length":1453,"saved":false}
{"ts":1369423071662,"patch":[[{"diffs":[[0,"');\n    "],[1,"assert.notStrictEqual(stats.duration.seconds, undefined, 'should be a duration.seconds property');\n    \n    // expected duration types\n    assert(!isNaN(stats.duration.hours), 'duration.hours should be a number');\n    \n    \n    // expected duration properties constraints\n    assert(stats.duration.minutes < 60, 'duration.minutes should be no greater than 59');\n    assert(stats.duration.seconds < 60, 'duration.seconds should be no greater than 59');\n    assert(stats.duration.milliseconds < 1000, 'duration.milliseconds should be no greater than 999');\n    \n    console.log('All tests passed');"],[0,"\n});"]],"start1":1441,"start2":1441,"length1":12,"length2":608}]],"length":2049,"saved":false}
{"ts":1369423109674,"patch":[[{"diffs":[[0,"le = 'te"],[-1,"x"],[1,"s"],[0,"t/test.m"]],"start1":79,"start2":79,"length1":17,"length2":17}]],"length":2049,"saved":false}
{"ts":1369423255071,"patch":[[{"diffs":[[1,"\n"],[0,"var assert ="]],"start1":0,"start2":0,"length1":12,"length2":13},{"diffs":[[0,"('assert');\n"],[1,"var should = require('should');\n"],[0,"var mp3dat ="]],"start1":21,"start2":21,"length1":24,"length2":56},{"diffs":[[0," stat me"],[-1,"n"],[0,"t"],[1,"hnp"],[0,"od');\nas"]],"start1":215,"start2":215,"length1":18,"length2":20}]],"length":2084,"saved":false}
{"contributors":[],"silentsave":false,"ts":1369424693883,"patch":[[{"diffs":[[0,"stats.fi"],[-1,"z"],[0,"lesize, "]],"start1":550,"start2":550,"length1":17,"length2":16}]],"length":2083,"saved":false}
{"contributors":[],"silentsave":false,"ts":1369427252098,"patch":[[{"diffs":[[0,"('should');\n"],[1,"var testFile = 'test/test.mp3';\n"],[0,"var mp3dat ="]],"start1":53,"start2":53,"length1":24,"length2":56},{"diffs":[[0,"js')"],[-1,";\nvar "],[1,"("],[0,"testFile"],[-1," = 'test/test.mp3';"],[1,", 50000);\n"],[0,"\n\n\na"]],"start1":128,"start2":128,"length1":41,"length2":27}]],"length":2101,"saved":false}
{"ts":1369427287522,"patch":[[{"diffs":[[0,"');\n"],[-1,"var testFile = 'test/test.mp3';\n"],[0,"var "]],"start1":61,"start2":61,"length1":40,"length2":8},{"diffs":[[0,"js')"],[-1,"("],[1,";\nvar "],[0,"testFile"],[-1,", 50000);\n"],[1," = 'test/test.mp3';"],[0,"\n\n\na"]],"start1":96,"start2":96,"length1":27,"length2":41}]],"length":2083,"saved":false}
{"ts":1369427339584,"patch":[[{"diffs":[[0,"t.mp3';\n"],[1,"var util = require('util');\nutil.inspect(mp3dat);\n"],[0,"\n\nassert"]],"start1":126,"start2":126,"length1":16,"length2":66}]],"length":2133,"saved":false}
{"ts":1369427348404,"patch":[[{"diffs":[[0,"util');\n"],[1,"console.log("],[0,"util.ins"]],"start1":154,"start2":154,"length1":16,"length2":28},{"diffs":[[0,"(mp3dat)"],[-1,";"],[1,");\n"],[0,"\n\n\nasser"]],"start1":186,"start2":186,"length1":17,"length2":19}]],"length":2147,"saved":false}
