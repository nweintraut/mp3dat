{"ts":1369423808781,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1369423909191,"patch":[[{"diffs":[[1,"var fs = require('fs');\n// half-byte(4bit) hex values to interpreted bitrates(bps)\n//only MPEG-1 bitrates supported\nvar bitrates = {\n    1: 32000, 2: 40000, 3: 48000, 4: 56000, 5: 64000,\n    6: 80000, 7: 96000, 8: 112000, 9: 128000, A: 160000, B: 192000,\n    C: 224000, D: 256000, E: 320000 };\n    "]],"start1":0,"start2":0,"length1":0,"length2":298}]],"length":298,"saved":false}
{"ts":1369424005348,"patch":[[{"diffs":[[0,"0000 };\n"],[-1,"    "],[1,"function buildStats(bitrate, size, cb) {\n    var magnitudes = ['hours', 'minutes', 'seconds', 'milliseconds'],\n        duration = {},\n        stats,\n        hours = (size / (bitrate / 8) / 3600);\n    (function timeProcessor(time, counter){\n        \n    })(hours, 0);\n}"]],"start1":286,"start2":286,"length1":12,"length2":276}]],"length":562,"saved":false}
{"ts":1369424180340,"patch":[[{"diffs":[[0,"unter){\n"],[1,"        var timeArray = [],\n            factor = (counter < 3) ? 60 : 1000;\n        if (counter) {\n            timeArray = (factor * + ('0.' + time)).toString().split('.');\n        }\n        if (counter < magnitudes.length -1 ) {\n            duration[magnitudes[counter]] = timeArray[0] || Math.floor(time);\n            duration[magnitudes[counter]] = + duration[magnitudes[counter]];\n            counter += 1;\n            timeProcessor(timeArray[1] || time.toString().split('.')[1], counter);\n            return;\n        }\n"],[0,"        "]],"start1":526,"start2":526,"length1":16,"length2":540}]],"length":1086,"saved":false}
{"ts":1369424337119,"patch":[[{"diffs":[[0,"    "],[-1,"\n    })(hours, 0"],[1,"// round off the final magnitude\n        duration[magnitudes[counter]] = Math.round(timeArray.join('.'));\n    })(hours, 0);\n    stats = {\n        duration: duration,\n        bitrate: bitrate,\n        filesize: size,\n        timestamp: Math.round(hours *3600000),\n        timesig: ''\n    };\n    funciton pad(n){return n < 10 ? '0'+n : n}\n    magnitudes.forEach(function(mag, i){\n        if (i<3) {\n            stats.timesig += pad(duration[mag]) + ((i<2) ? ':' : '');\n        }\n    });\n    cb(null, stats"],[0,");\n}"]],"start1":1062,"start2":1062,"length1":24,"length2":511}]],"length":1573,"saved":false}
{"ts":1369424606163,"patch":[[{"diffs":[[0,"    func"],[-1,"i"],[0,"t"],[1,"i"],[0,"on pad(n"]],"start1":1356,"start2":1356,"length1":18,"length2":18},{"diffs":[[0,"stats);\n"],[-1,""],[0,"}"],[1,"\nfunction findBitRate(f, cb) {\n    fs.createReadStream(f)\n        .on('data', function(data){\n            var i;\n            for (i=0; i < data.length; i += 2) {\n                if(data.readUInt16LE(i) === 64511) {\n                    this.destroy();\n                    cb(null, bitrates[data.toString('hex', i+2, i+ 3)[0]]);\n                    break;\n                }\n            }   \n        })\n        .on('end', function(){\n            cb(new Error('could not find bitrate, is this definitely an MPEG-1 MP3?'));\n        });\n}\nexports.stat = function(f, cb){\n    fs.stat(f, function(err, fstats){\n       findBitRate(f, function(err, bitrate) {\n           if(err) {cb(err); return;}\n           buildStats(bitrate, fstats.size, cb);\n       });\n    });\n};"]],"start1":1564,"start2":1564,"length1":9,"length2":767}]],"length":2331,"saved":false}
{"contributors":[],"silentsave":false,"ts":1369425263930,"patch":[[{"diffs":[[0,"pported\n"],[-1,"var "],[1,"\nfunction Mp3dat(f, size){\n    if (!(this instanceof Mp3dat)){\n        return new Mp3dat(f, size);\n    }\n    this.stats = {duration:{}};\n}\nMp3dat.prototype._"],[0,"bitrates"]],"start1":108,"start2":108,"length1":20,"length2":173},{"diffs":[[0,"20000 };"],[1,"\n\nMp3dat.prototype._magnitudes = ['hours', 'minutes', 'seconds', 'milliseconds'];\n\nMp3dat.prototype._pad = function(n){return n < 10 ? '0'+n : n}"],[0,"\nfunctio"]],"start1":438,"start2":438,"length1":16,"length2":161},{"diffs":[[0,"8) / 3600);\n"],[-1,""],[0,"    (functio"]],"start1":776,"start2":776,"length1":24,"length2":24},{"diffs":[[0,"ounter){"],[1,"['hours', 'minutes', 'seconds', 'milliseconds'],"],[0,"\n       "]],"start1":823,"start2":823,"length1":16,"length2":64}]],"length":2677,"saved":false}
{"ts":1369425367307,"patch":[[{"diffs":[[0,"'+n : n}"],[1,";\n\nMp3dat.prototype._timesig = function() {\n    var ts = '', self = this;\n    self._magnitudes.forEach(function(mag, i){\n        if(i<3) {\n            ts += self._pad(self.stats.duration[mag]) + ((i<2) ? ':' : '');\n        }\n    });\n    return ts;\n}"],[0,"\nfunctio"]],"start1":583,"start2":583,"length1":16,"length2":265}]],"length":2926,"saved":false}
{"ts":1369425515706,"patch":[[{"diffs":[[0,"rn ts;\n}"],[1,";\n\nMp3dat.prototype._findBitRate = fucntion(cb) {\n    var self = this;\n    fs.createReadStream(self.f)\n        .on('data', function(data){\n           var i = 0;\n           for (i; i < data.length; i += 2) {\n               if (data.readUInt16LE(i) === 64511) {\n                   self.bitrate = self._bitrates[data.toString('hex', i+2, i+3)[0]];\n                   this.destroy();\n                   cb(null);\n                   break;\n               }\n           }\n        });\n}\n"],[0,"\nfunctio"]],"start1":832,"start2":832,"length1":16,"length2":495}]],"length":3405,"saved":false}
{"ts":1369425530815,"patch":[[{"diffs":[[0,"= fu"],[-1,"c"],[0,"n"],[1,"c"],[0,"tion"]],"start1":873,"start2":873,"length1":10,"length2":10}]],"length":3405,"saved":false}
{"ts":1369425533660,"patch":[[{"diffs":[[0,"   });\n}"],[1,";"],[0,"\n\nfuncti"]],"start1":1310,"start2":1310,"length1":16,"length2":17}]],"length":3406,"saved":false}
{"ts":1369425800214,"patch":[[{"diffs":[[0,"      }\n    "],[1,"    })\n        .on('end', function(){\n            cb(new Error('could not find bitrate, is this definitely an MPEG-1 MP3?'));\n        });\n};\n\nMp3dat.prototype._buildStats = function(cb){\n    var self = this, \n        hours = (self.size / (self.bitrate / 8) / 3600);\n    self._timeProcessor(hours, function(duration) {\n          self.stats{\n              duration: duration,\n              bitrate: self.bitrate,\n              filesize: self.size,\n              timestamp: Math.round(hours * 3600000),\n              timesig: self._timesig(duration, self.magnitudes)\n          };\n        cb(null, self.stats);      \n"],[0,"    });\n};\n\n"]],"start1":1297,"start2":1297,"length1":24,"length2":637}]],"length":4019,"saved":false}
{"ts":1369425811600,"patch":[[{"diffs":[[0," });\n};\n"],[1,"/*"],[0,"\nfunctio"]],"start1":1925,"start2":1925,"length1":16,"length2":18},{"diffs":[[0,"  });\n    });\n};"],[1,"\n*/"]],"start1":4005,"start2":4005,"length1":16,"length2":19}]],"length":4024,"saved":false}
{"ts":1369425858604,"patch":[[{"diffs":[[0,"lf.stats"],[1," = "],[0,"{\n      "]],"start1":1639,"start2":1639,"length1":16,"length2":19}]],"length":4027,"saved":false}
{"ts":1369426006348,"patch":[[{"diffs":[[0,"    });\n};\n\n"],[1,"Mp3dat.prototype._timeProcessor = function(time, counter, cb) {\n    var self = this,\n        timeArray = [],\n        factor = (counter < 3) ? 60 : 1000, \n        magnitudes = self._magnitudes,\n        duration = self.stats.duration;\n    if(counter instanceof Function) {\n        cb = counter;\n        counter = 0;\n        \n    }\n    if (counter) {\n        timeArray = (factor * + ('0.' + time )).toString().spilt('.');\n    }\n}\n"],[0,"Mp3dat.proto"]],"start1":1439,"start2":1439,"length1":24,"length2":451}]],"length":4454,"saved":false}
{"ts":1369426013567,"patch":[[{"diffs":[[0,"\n    }\n}"],[1,";"],[0,"\nMp3dat."]],"start1":1869,"start2":1869,"length1":16,"length2":17}]],"length":4455,"saved":false}
{"ts":1369426151767,"patch":[[{"diffs":[[0,";\n    }\n"],[1,"    if (counter < magnitudes.length -1 ) {\n        duration[magnitudes[counter]] = timeArray[0] || Math.floor(time);\n        duration[magnitudes[counter]] = +duration[magnitudes[counter]];\n        counter += 1;\n        self._timeProcessor.call(self, timeArray[1] || time.toString().split('.')[1], counter, cb);\n        return;\n    }\n    // round off the final magnitude (milliseconds)\n    duration[magnitudes[counter]] = Match.round(timeArray.join('.'));\n    cb(duration);\n"],[0,"};\nMp3da"]],"start1":1868,"start2":1868,"length1":16,"length2":489}]],"length":4928,"saved":false}
{"ts":1369426153911,"patch":[[{"diffs":[[0,"]] = Mat"],[-1,"c"],[0,"h.round("]],"start1":2292,"start2":2292,"length1":17,"length2":16}]],"length":4927,"saved":false}
{"ts":1369426261718,"patch":[[{"diffs":[[0," });\n};\n"],[1,"Mp3dat.prototype.stat = function(f, cb) {\n    var self = this;\n    fs.stat(f, function(err, fstats){\n        self.size = fstats.size;\n        self.f = f;\n        self._findBitRate(function(err, bitrate){\n            if(err){cb(err); return;}\n            self._buildStats(cb);\n        });\n    });\n};\n"],[0,"/*\nfunct"]],"start1":2828,"start2":2828,"length1":16,"length2":315}]],"length":5226,"saved":false}
{"ts":1369426276264,"patch":[[{"diffs":[[0," });\n};\n"],[1,"module.exports = Mp3dat();\n"],[0,"/*\nfunct"]],"start1":3127,"start2":3127,"length1":16,"length2":43}]],"length":5253,"saved":false}
{"ts":1369426300384,"patch":[[{"diffs":[[0,"ing().sp"],[-1,"i"],[0,"l"],[1,"i"],[0,"t('.');\n"]],"start1":1852,"start2":1852,"length1":18,"length2":18}]],"length":5253,"saved":false}
{"ts":1369427308822,"patch":[[{"diffs":[[0," Mp3dat("],[1,"'test/test.mp3', 50000"],[0,");\n/*\nfu"]],"start1":3151,"start2":3151,"length1":16,"length2":38}]],"length":5275,"saved":false}
{"ts":1369427403812,"patch":[[{"diffs":[[0,"on:{}};\n"],[1,"    this.f = f;\n    this.size = size;\n"],[0,"}\nMp3dat"]],"start1":245,"start2":245,"length1":16,"length2":54}]],"length":5313,"saved":false}
{"ts":1369427450478,"patch":[[{"diffs":[[0,"dat("],[-1,"'test/test.mp3', 50000"],[0,");\n/"]],"start1":3193,"start2":3193,"length1":30,"length2":8}]],"length":5291,"saved":false}
{"contributors":[],"silentsave":false,"ts":1369427566634,"patch":[[{"diffs":[[0,"t(f, size){\n"],[1,"    var self = this;\n"],[0,"    if (!(th"]],"start1":131,"start2":131,"length1":24,"length2":45}]],"length":5312,"saved":false}
{"ts":1369427686727,"patch":[[{"diffs":[[0," Mp3dat("],[-1,"f, size"],[0,");\n    }"]],"start1":218,"start2":218,"length1":23,"length2":16},{"diffs":[[0,"    "],[-1,"this"],[1,"self"],[0,".stat"],[-1,"s"],[0," = "],[-1,"{duration:{}};\n    this.f = f;\n    this.size = size;"],[1,"function(f, cb) {\n        fs.stat(f, function(err, fstats) {\n            self.size = fstats.size;\n            self.f = f;\n            self._findBitRate(function(err, bitrate){  \n                if(err){cb(err); return;}\n                self._buildStats(cb);\n            });\n        });\n    };\n    self.stats = {duration:{}};\n"],[0,"\n}\nM"]],"start1":235,"start2":235,"length1":73,"length2":345}]],"length":5577,"saved":false}
{"ts":1369427725447,"patch":[[{"diffs":[[0,"on:{}};\n"],[-1,"\n"],[0,"}\nMp3dat"]],"start1":568,"start2":568,"length1":17,"length2":16},{"diffs":[[0," });\n};\n"],[1,"// "],[0,"module.e"]],"start1":3450,"start2":3450,"length1":16,"length2":19}]],"length":5579,"saved":false}
{"ts":1369427808233,"patch":[[{"diffs":[[0,"\n    });\n};\n"],[1,"/*\n"],[0,"Mp3dat.proto"]],"start1":3147,"start2":3147,"length1":24,"length2":27},{"diffs":[[0," });\n};\n"],[-1,"// "],[1,"*/\n"],[0,"module.e"]],"start1":3453,"start2":3453,"length1":19,"length2":19}]],"length":5582,"saved":false}
{"ts":1369428077358,"patch":[[{"diffs":[[0,"= Mp3dat"],[-1,"()"],[0,";\n/*\nfun"]],"start1":3479,"start2":3479,"length1":18,"length2":16}]],"length":5580,"saved":false}
{"ts":1369428176519,"patch":[[{"diffs":[[0," 320000 };\n\n"],[1,"Mp3dat.prototype.spawnInstance = function(){\n    return Mp3dat();\n}\n"],[0,"Mp3dat.proto"]],"start1":759,"start2":759,"length1":24,"length2":92}]],"length":5648,"saved":false}
